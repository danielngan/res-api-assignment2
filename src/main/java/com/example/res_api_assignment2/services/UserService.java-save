package com.example.res_api_assignment2.services;

//import com.example.library.model.User;
//import com.example.library.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import com.example.res_api_assignment2.repositories.UserRepository;
import com.example.res_api_assignment2.model.User;

import java.util.regex.Pattern;

@Service
public class UserService {

//    @Autowired
//    private UserRepository<User> userRepo;

    //private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

//    public User registerUser(User user) {
//        // Validation
//        if (user.getFirstName() == null || user.getFirstName().isEmpty()) {
//            throw new IllegalArgumentException("First name is required");
//        }
//        if (user.getLastName() == null || user.getLastName().isEmpty()) {
//            throw new IllegalArgumentException("Last name is required");
//        }
//        if (user.getEmail() == null || !isValidEmail(user.getEmail())) {
//            throw new IllegalArgumentException("Invalid email format");
//        }
//        if (user.getPassword() == null || user.getPassword().length() < 6) {
//            throw new IllegalArgumentException("Password must be at least 6 characters");
//        }
//
//        // Email already used
//        if (userRepo.findByEmail(user.getEmail()).isPresent()) {
//            throw new IllegalArgumentException("Email already registered");
//        }
//
////        // Encrypt password
////        user.setPassword(passwordEncoder.encode(user.getPassword()));
//
//        return userRepo.save(user);
//    }
//
//    private boolean isValidEmail(String email) {
//        String emailRegex = "^[A-Za-z0-9+_.-]+@(.+)$";
//        return Pattern.matches(emailRegex, email);
//    }
//
//    public User getUserById(String id) throws Throwable {
//        return (User) userRepo.findById(id)
//                .orElseThrow(() -> new IllegalArgumentException("User not found with ID: " + id));
//    }
}
